meses_esp <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
meses_eng <- month.name  #
mes_map <- setNames(meses_eng, meses_esp)
# Mapeo de los meses
TCR$Mes <- mes_map[TCR$Mes]
# Verificar los cambios en la columna "Mes"
unique(TCR$Mes)
# años en una columna y los valores de tipo de cambio en otra
TCR_long <- TCR %>%
pivot_longer(cols = `1998`:`2024`,
names_to = "Year",
values_to = "TCR") %>%
mutate(Mes = factor(Mes, levels = month.name),
Fecha = as.Date(paste(Year, match(Mes, month.name), "01", sep = "-"), format = "%Y-%m-%d")) %>%  # Cambiado para usar 'match' en lugar de 'Mes' directamente
arrange(Fecha) %>%  # Ordenar por fecha
select(Fecha, TCR)
#write_xlsx(TCR_long, "C:/Users/nayde/OneDrive/Desktop/datos/TCR_LONG.xlsx")
#Rutas, cambie
ruta_imae <- "../data/IMAE (oct 2023).xlsx"
ruta_ipc <- "../data/IPC 98.xlsx"
ruta_ipp_man <- "../data/IPP MAN.xlsx"
ruta_iip_servicios <- "../data/IIP servicios .xlsx"
ruta_tipo_cambio <- "../data/PromedioTipoCambioMensual.xlsx" #ya pasado a mensual
ruta_fed_rate <- "../data/FedRateMensualCompleto.xlsx"
ruta_tipo_cambio_real_long <- "../data/TCR_LONG.xlsx"
#Limpio los datos que siguen la misma estructura de los excel IMAE, IPC,IPP
limpiar_datos <- function(datos, nombres_columnas, columna_fecha) {
datos_limpios <- datos[-c(1:4), ]
colnames(datos_limpios) <- nombres_columnas
datos_limpios <- datos_limpios %>%
mutate(across(-all_of(columna_fecha), as.numeric)) %>%
mutate(across(all_of(columna_fecha), ~ as.Date(paste0("01-", .), format = "%d-%B/%Y"))) %>%
filter(!is.na(!!sym(columna_fecha))) %>%
rename(Periodo = all_of(columna_fecha))
return(datos_limpios)
}
# Cargar y limpiar IMAE
imae <- read_excel(ruta_imae, sheet = "Hoja1")
IMAE_limpia <- limpiar_datos(imae,
c("Periodo_IMAE", "Nivel_IMAE", "Var_Ultimos_12_IMAE",
"Var_Media_IMAE", "Aceleracion_IMAE", "Var_Interanual_IMAE"),
"Periodo_IMAE")
# Cargar y limpiar IPC
ipc <- read_excel(ruta_ipc, sheet = "Hoja1")
IPC_limpia <- limpiar_datos(ipc,
c("Periodo_IPC", "Nivel_IPC", "Var_Mensual_IPC",
"Var_Interanual_IPC", "Var_Acumulada_IPC"),
"Periodo_IPC")
# Cargar y limpiar IPP MAN
ipp_man <- read_excel(ruta_ipp_man, sheet = "Hoja1")
IPP_MAN_limpia <- limpiar_datos(ipp_man,
c("Periodo_IPPM", "Nivel_IPPM", "Var_Mensual_IPPM",
"Var_Interanual_IPPM", "Var_Acumulada_IPPM"),
"Periodo_IPPM")
# Cargar y limpiar IIP servicios
iip_servicios <- read_excel(ruta_iip_servicios, sheet = "Hoja1")
IIP_SERVICIOS_limpia <- limpiar_datos(iip_servicios,
c("Periodo_IPPS", "Nivel_IPPS", "Var_Mensual_IPPS",
"Var_Interanual_IPPS", "Var_Acumulada_IPPS"),
"Periodo_IPPS")
# Cargar y limpiar el archivo de tipo de cambio, ya mensual
tipo_cambio <- read_excel(ruta_tipo_cambio)
colnames(tipo_cambio)[1] <- "Periodo"
tipo_cambio$Periodo <- as.Date(paste0(tipo_cambio$Periodo, "-01"), format = "%Y-%m-%d")
# Cargar y limpiar el archivo federal rate, ya mensual
fed_rate <- read_excel(ruta_fed_rate)
colnames(fed_rate)[1] <- "Periodo"
fed_rate$Periodo <- as.Date(paste0(tipo_cambio$Periodo, "-01"), format = "%Y-%m-%d")
# Cargar y limpiar el archivo de tipo de cambio Real
tipo_cambio_real<- read_excel(ruta_tipo_cambio_real_long)
colnames(tipo_cambio_real)[1] <- "Periodo"
tipo_cambio_real$Periodo <- as.Date(paste0(tipo_cambio_real$Periodo, "-01"), format = "%Y-%m-%d")
# Unir todo
datos_combinados <- full_join(IPC_limpia, IMAE_limpia, by = "Periodo")
datos_combinados <- full_join(datos_combinados, IPP_MAN_limpia, by = "Periodo")
datos_combinados <- full_join(datos_combinados, IIP_SERVICIOS_limpia, by = "Periodo")
datos_combinados <- full_join(tipo_cambio_real, datos_combinados, by = "Periodo")
datos_combinados <- full_join(tipo_cambio, datos_combinados, by = "Periodo")
datos_finales <- full_join(fed_rate, datos_combinados, by = "Periodo")
#reorganizar, para que el tipo de cambio aparezca siempre en la primera columna
datos_finales <- datos_finales %>%
select(Periodo, contains("TCR"), everything())
print(head(datos_finales))
# Exportar el resultado final, cuando este listo
#write_xlsx(datos_finales, "C:/Users/nayde/OneDrive/Desktop/datos/Datos_Combinados_Finales.xlsx")
# Ver las primeras filas de los datos ya transformados
#head(TCR_long)
data_original <- read_excel("../data/IPC USA.xlsx")
IPC_USA <- data_original %>%
filter(Year >= 1998) %>% # Filtrar desde 1998
pivot_longer(cols = Jan:Dec, names_to = "Mes", values_to = "IPC") %>% # Convertir a formato largo
mutate(Mes = match(Mes, month.abb), # Convertir nombres de meses a números
Fecha = as.Date(paste(Year, Mes, "01", sep = "-")),
IPC = as.numeric(IPC)) %>% #
arrange(Fecha) %>% # Ordenar por fecha
select(Fecha, IPC, Avg, `Dec-Dec`, `Avg-Avg`)
head(IPC_USA)
colnames(IPC_USA)
IPC_USA <- IPC_USA %>%
mutate(
Variacion_Mensual = (IPC - lag(IPC)) / lag(IPC) * 100
)
head(IPC_USA)
IPC_USA <- IPC_USA %>%
rename(
IPC_US = IPC,
Prom_Anual_US = Avg,
Cambio_Anual_US = `Dec-Dec`,
Promedio_Cambio = `Avg-Avg`,
Var_Mensual_US = Variacion_Mensual,
Periodo = Fecha
)
# Unir las tablas
datos_finales <- datos_finales %>%
left_join(IPC_USA, by = "Periodo")
head(datos_finales)
datos_finales <- datos_finales %>%
select(-ends_with(".x"))
datos_finales <- datos_finales %>%
rename_with(~ gsub("\\.y$", "", .), ends_with(".y"))
datos_finales <- datos_finales%>%
select(-Prom_Anual_US, -Promedio_Cambio)
promedio_movil <- rollmean(datos_finales$IPC_US, k = 3, fill = NA, align = "center")
promedio_movil <- na.fill(promedio_movil, "extend")
datos_finales$IPC_US <- ifelse(
is.na(datos_finales$IPC_US),
promedio_movil,
datos_finales$IPC_US
)
datos_finales$Cambio_Anual_US <- as.numeric(datos_finales$Cambio_Anual_US)
promedio_cambio <- mean(datos_finales$Cambio_Anual_US, na.rm = TRUE)
datos_finales$Cambio_Anual_US <- ifelse(
is.na(datos_finales$Cambio_Anual_US),
promedio_cambio,
datos_finales$Cambio_Anual_US
)
datos_finales <- datos_finales %>%
mutate(
Var_Mensual_US = ifelse(
is.na(Var_Mensual_US),
(IPC_US - lag(IPC_US)) / lag(IPC_US) * 100,
Var_Mensual_US
)
)
datos_finales$Var_Mensual_US[1] <- 0.185989
tbp_diaria <- read_excel("../data/TBP CR (diario, en 1998).xlsx")
colnames(tbp_diaria)[1] <- "Dia_Mes"
meses_es <- c("Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic")
tbp_largo <- tbp_largo %>%
mutate(
Dia = as.numeric(sub(" .*", "", Dia_Mes)),
Mes = match(sub(".* ", "", Dia_Mes), meses_es),
Fecha = as.Date(paste(Año, sprintf("%02d", Mes), sprintf("%02d", Dia), sep = "-"))
)
pib_data <- read_excel("../data/PIB_USa.xls")
#pasar a fecha
pib_data <- pib_data %>%
mutate(observation_date = as.Date(observation_date)) %>%
filter(year(observation_date) >= 1998)
fechas_mensuales <- seq(
from = min(pib_data$observation_date),
to = max(pib_data$observation_date),
by = "month"
)
#interpolación lineal para convertir trimestral a mensual
pib_mensual <- tibble(
Fecha = fechas_mensuales,
PIB = approx(
x = pib_data$observation_date,
y = as.numeric(gsub(",", "", pib_data$GDP)),
xout = fechas_mensuales
)$y
)
pib_US <- pib_mensual
pib_US <- pib_US %>%
rename(Periodo = Fecha )
pib_US <- pib_US %>%
rename(PIB_US = PIB)
datos_finales <- datos_finales %>%
left_join(pib_US, by = "Periodo")
pib_cr <- read_excel("../data/pibcr.xlsx")
pib_cr <- pib_cr %>%
mutate(
Fecha_Trimestre = case_when(
grepl("-I$", `...1`) ~ paste0(substr(`...1`, 1, 4), "-01-01"), # Trimestre I
grepl("-II$", `...1`) ~ paste0(substr(`...1`, 1, 4), "-04-01"), # Trimestre II
grepl("-III$", `...1`) ~ paste0(substr(`...1`, 1, 4), "-07-01"), # Trimestre III
grepl("-IV$", `...1`) ~ paste0(substr(`...1`, 1, 4), "-10-01")  # Trimestre IV
),
Fecha_Trimestre = as.Date(Fecha_Trimestre)
)
#Interpolar
fechas_mensuales <- seq(
from = min(pib_cr$Fecha_Trimestre),
to = max(pib_cr$Fecha_Trimestre),
by = "month"
)
pib_cr_mensual <- tibble(
Fecha = fechas_mensuales,
PIB = approx(
x = pib_cr$Fecha_Trimestre,
y = pib_cr$`PIB trimestral en constantes`,
xout = fechas_mensuales
)$y,
Variacion_Interanual = approx(
x = pib_cr$Fecha_Trimestre,
y = pib_cr$`PIB trimestral en constantes-variación interanual`,
xout = fechas_mensuales
)$y
)
pib_cr_mensual <- pib_cr_mensual %>%
mutate(
Var_Mensual = (PIB - lag(PIB)) / lag(PIB) * 100
)
pib_CR <- pib_cr_mensual
pib_CR <- pib_CR %>%
rename(Periodo = Fecha, Var_PIBCR = Var_Mensual)
datos_finales <- datos_finales %>%
left_join(pib_CR, by = "Periodo")
datos_finales <- datos_finales %>%
mutate(
Var_PIBUS = (PIB_US - lag(PIB_US)) / lag(PIB_US) * 100
)
write.csv(datos_finales, "Data_FINAL.csv", row.names = FALSE)
getwd()
datos_finales$Periodo <- as.Date(datos_finales$Periodo, format = "%d/%m/%Y")
summary(datos_finales)
#install.packages(c("dplyr", "ggplot2", "tidyr", "corrplot", "DataExplorer", "skimr"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(corrplot)
library(DataExplorer)
library(skimr)
skim(datos_finales)
numericas <- datos_finales %>%
select_if(is.numeric)
correlaciones <- cor(numericas, use = "complete.obs")
subconjunto <- correlaciones[c("PIB", "Nivel_IPC", "PIB_US", "Var_Mensual_IPC"),
c("PIB", "Nivel_IPC", "PIB_US", "Var_Mensual_IPC")]
summary(numericas)
numericas <- datos_finales %>%
select_if(is.numeric)
summary(numericas)
# Descargar librerías necesarias
library(ggplot2) # para crear gráficos
library(readxl)
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("TCR_LONG.xlsx")
tcr <- transform(tcr, TCR = as.numeric(TCR))
tcr <- head(tcr, -4)
summary(tcr)
# Se renombra la columna TCR
df <- tcr # Crear una copia del data frame
colnames(df)[colnames(df) == "TCR"] <- "S" # Renombrar la columna "CPI" a "S"
df
# Se calculan los retornos relativos
df$`Retorno` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$Retorno <- c(df$S[-1] / df$S[-nrow(df)] - 1, 0)
# Se estima el parámetro mu como la media del retorno y sigma como la desviación estándar como valores iniciales
mu = mean(df$Retorno)
mu
sigma = sd(df$Retorno)
sigma
# Se crea una nueva columna para ΔS
df$`S(t+1)-S(t)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`S(t+1)-S(t)` <- c(diff(df$S), 0)  # Calcula las diferencias y añade un 0 al final
df
# Se crea una nueva columna para μS
df$`muS(t)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`muS(t)` <- mu * df$S
df
# Se crea un columna para ΔS - μS
df$`S(t+1)-S(t)-muS(t)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`S(t+1)-S(t)-muS(t)` <- df$`S(t+1)-S(t)` - df$`muS(t)`
df
# Se crea una columna para la función de verosimilitud
mu_2 <- 0.00  # Media fija
sigma_2 <- sigma * df$S  # Vector de sigmas
x <- df$`S(t+1)-S(t)-muS(t)`  # Vector de valores x
df$pdf <- dnorm(x, mean = mu_2, sd = sigma_2)  # Calcular densidad para cada fila
df
# Se crea una columna para la función log-verosimilitud
df$`ln(pdf)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`ln(pdf)` <- log(df$pdf)
df
# Se suma la columna de log-verosimilitud
sum(df$`ln(pdf)`)
mov_browniano <- function(c) {
# Copiar y renombrar la columna
df <- tcr
colnames(df)[colnames(df) == "TCR"] <- "S"
# Calcular las nuevas columnas vectorizadas
df$`S(t+1)-S(t)` <- c(diff(df$S), 0)  # Diferencias entre filas
df$`muS(t)` <- c[1] * df$S  # Producto con mu
df$`S(t+1)-S(t)-muS(t)` <- df$`S(t+1)-S(t)` - df$`muS(t)`  # Restar
# Calcular pdf y log(pdf)
mu_2 <- 0.00
sigma_2 <- c[2] * df$S  # calcular sigma
x <- df$`S(t+1)-S(t)-muS(t)`  # Vector x
df$pdf <- dnorm(x, mean = mu_2, sd = sigma_2)  # Densidad normal
df$`ln(pdf)` <- log(df$pdf)  # Logaritmo de la densidad
# Sumar log(pdf) ignorando valores NA
f1 <- sum(df$`ln(pdf)`, na.rm = TRUE)
# Minimizar el valor de la función objetivo
val <- -f1
cat("[mu, sigma] = ", c, ", Valor de la Función Objetivo: ", val, "\n")
return(val)
}
# Optimización
c_inicial <- c(mu, sigma)  # Valores iniciales
resultado <- optim(c_inicial, mov_browniano)
# Ver resultados
resultado
# Por lo tanto, se tiene que
mu <- resultado$par[1]
mu
sigma <- resultado$par[2]
sigma
# son los parámetros que maximizan la log-verosimilitud
# Parámetros
n <- 365  # Número de días de simulación
sim <- 50  # Número de simulaciones
dt <- 1  # Incremento de tiempo (1 día)
S0 <- tail(df$S, 1)  # Último valor observado del tipo de cambio
# Simulación
set.seed(123)  # Para reproducibilidad
caminos <- matrix(NA, nrow = n, ncol = sim)
caminos[1, ] <- S0  # Valor inicial
for (i in 2:n) {
z <- rnorm(sim)  # Término de ruido
caminos[i, ] <- caminos[i - 1, ] * exp((mu - 0.5 * sigma^2) * dt + sigma * z * sqrt(dt))
}
# Visualización
time <- 1:n
matplot(time, caminos, type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
valores_finales <- caminos[nrow(caminos), ]  # Valores finales de todas las simulaciones
percentiles <- quantile(valores_finales, probs = c(0.05, 0.5, 0.95))  # Percentiles 5%, 50%, 95%
print(percentiles)
#matplot(length(t), caminos, type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
columns(tcr)
col(tcr)
View(TCR)
View(TCR_long)
col(TCR_long)
TCR_long$TCR
matplot(length(tcr), TCR_long[TCR], type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
View(tcr)
matplot(length(tcr), tcr[TCR], type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
tcr
tcr[TCR]
tcr$TCR
matplot(length(tcr), tcr$TCR, type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
length(tcr)
numcol(tcr)
row(tcr)
matplot(row(tcr), tcr$TCR, type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
matplot(tcr$Fecha, tcr$TCR, type = "l", lty = 1, col = rainbow(sim), main = "Trayectoria Real TCR", xlab = "Días", ylab = "Tipo de Cambio Real")
promedio_sim <- rowMeans(caminos)  # Promedio de las simulaciones
promedio_real <- rowMwans(tcr$TCR) # Promedio TCR histórico
promedio_sim <- rowMeans(caminos)  # Promedio de las simulaciones
promedio_real <- rowMeans(tcr$TCR) # Promedio TCR histórico
rowMeans(caminos)
caminos
View(caminos)
promedio <- rowMeans(caminos)  # Promedio de las simulaciones
promedio_sim <- rowMeans(promedio)
promeido
promeido
promedio
promedio_sims
promedio_sim
promedio_real
promedio_real <- rowMeans(tcr$TCR)
tcr$TCR
mean(tcr$TCR)
promedio <- rowMeans(caminos)  # Promedio de las simulaciones
promedio_sim <- mean(promedio)
promedio_real <- mean(tcr$TCR) # Promedio TCR histórico
rmse <- sqrt(mean((promedio_real - promedio_sim)^2))
rmse
mae <- mean(abs(promedio_real - promedio_sim))
mae
promedio <- rowMeans(caminos)  # Promedio de las simulaciones
promedio_sim <- mean(promedio)
promedio_sim
promedio_real <- mean(tcr$TCR) # Promedio TCR histórico
promedio_real
rmse <- sqrt(mean((promedio_real - promedio_sim)^2))
rmse
mae <- mean(abs(promedio_real - promedio_sim))
mae
promedio <- rowMeans(caminos)  # Promedio de las simulaciones
promedio_sim <- mean(promedio)
promedio_sim
promedio_real <- mean(tcr$TCR) # Promedio TCR histórico
promedio_real
rmse <- sqrt(mean((promedio_real - promedio_sim)^2))
rmse
mae <- mean(abs(promedio_real - promedio_sim))
mae
# Descargar librerías necesarias
library(ggplot2) # para crear gráficos
library(readxl)
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("TCR_LONG.xlsx")
setwd("C:/Users/sofia/iCloudDrive/Desktop/universidad/UCR/Proyecto-Instrumentos-Financieros")
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("data\TCR_LONG.xlsx")
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("data/TCR_LONG.xlsx")
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("...data/TCR_LONG.xlsx")
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("../data/TCR_LONG.xlsx")
tcr <- transform(tcr, TCR = as.numeric(TCR))
tcr <- head(tcr, -4)
summary(tcr)
# Descargar librerías necesarias
library(ggplot2) # para crear gráficos
library(readxl)
# Importar archivo Excel con el tipo de cambio real en la historia
tcr <- read_excel("../data/TCR_LONG.xlsx")
tcr <- transform(tcr, TCR = as.numeric(TCR))
tcr <- head(tcr, -4)
summary(tcr)
# Se renombra la columna TCR
df <- tcr # Crear una copia del data frame
colnames(df)[colnames(df) == "TCR"] <- "S" # Renombrar la columna "CPI" a "S"
df
# Se calculan los retornos relativos
df$`Retorno` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$Retorno <- c(df$S[-1] / df$S[-nrow(df)] - 1, 0)
# Se estima el parámetro mu como la media del retorno y sigma como la desviación estándar como valores iniciales
mu = mean(df$Retorno)
mu
sigma = sd(df$Retorno)
sigma
# Se crea una nueva columna para ΔS
df$`S(t+1)-S(t)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`S(t+1)-S(t)` <- c(diff(df$S), 0)  # Calcula las diferencias y añade un 0 al final
df
# Se crea una nueva columna para μS
df$`muS(t)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`muS(t)` <- mu * df$S
df
# Se crea un columna para ΔS - μS
df$`S(t+1)-S(t)-muS(t)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`S(t+1)-S(t)-muS(t)` <- df$`S(t+1)-S(t)` - df$`muS(t)`
df
# Se crea una columna para la función de verosimilitud
mu_2 <- 0.00  # Media fija
sigma_2 <- sigma * df$S  # Vector de sigmas
x <- df$`S(t+1)-S(t)-muS(t)`  # Vector de valores x
df$pdf <- dnorm(x, mean = mu_2, sd = sigma_2)  # Calcular densidad para cada fila
df
# Se crea una columna para la función log-verosimilitud
df$`ln(pdf)` <- 0.00  # Crear una nueva columna inicializada en 0.00
df$`ln(pdf)` <- log(df$pdf)
df
# Se suma la columna de log-verosimilitud
sum(df$`ln(pdf)`)
mov_browniano <- function(c) {
# Copiar y renombrar la columna
df <- tcr
colnames(df)[colnames(df) == "TCR"] <- "S"
# Calcular las nuevas columnas vectorizadas
df$`S(t+1)-S(t)` <- c(diff(df$S), 0)  # Diferencias entre filas
df$`muS(t)` <- c[1] * df$S  # Producto con mu
df$`S(t+1)-S(t)-muS(t)` <- df$`S(t+1)-S(t)` - df$`muS(t)`  # Restar
# Calcular pdf y log(pdf)
mu_2 <- 0.00
sigma_2 <- c[2] * df$S  # calcular sigma
x <- df$`S(t+1)-S(t)-muS(t)`  # Vector x
df$pdf <- dnorm(x, mean = mu_2, sd = sigma_2)  # Densidad normal
df$`ln(pdf)` <- log(df$pdf)  # Logaritmo de la densidad
# Sumar log(pdf) ignorando valores NA
f1 <- sum(df$`ln(pdf)`, na.rm = TRUE)
# Minimizar el valor de la función objetivo
val <- -f1
cat("[mu, sigma] = ", c, ", Valor de la Función Objetivo: ", val, "\n")
return(val)
}
# Optimización
c_inicial <- c(mu, sigma)  # Valores iniciales
resultado <- optim(c_inicial, mov_browniano)
# Ver resultados
resultado
# Por lo tanto, se tiene que
mu <- resultado$par[1]
mu
sigma <- resultado$par[2]
sigma
# son los parámetros que maximizan la log-verosimilitud
# Parámetros
n <- 365  # Número de días de simulación
sim <- 50  # Número de simulaciones
dt <- 1  # Incremento de tiempo (1 día)
S0 <- tail(df$S, 1)  # Último valor observado del tipo de cambio
# Simulación
set.seed(123)  # Para reproducibilidad
caminos <- matrix(NA, nrow = n, ncol = sim)
caminos[1, ] <- S0  # Valor inicial
for (i in 2:n) {
z <- rnorm(sim)  # Término de ruido
caminos[i, ] <- caminos[i - 1, ] * exp((mu - 0.5 * sigma^2) * dt + sigma * z * sqrt(dt))
}
# Visualización
time <- 1:n
matplot(time, caminos, type = "l", lty = 1, col = rainbow(sim), main = "Simulaciones de TCR en Costa Rica", xlab = "Días", ylab = "Tipo de Cambio Real")
matplot(tcr$Fecha, tcr$TCR, type = "l", lty = 1, col = rainbow(sim), main = "Trayectoria Real TCR", xlab = "Días", ylab = "Tipo de Cambio Real")
